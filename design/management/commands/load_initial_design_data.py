from django.core.management.base import BaseCommand
from design.models import Category, Service, GeneralConfig

class Command(BaseCommand):
    help = 'Carga datos iniciales de categor√≠as, servicios y configuraci√≥n general para dise√±o.'

    def handle(self, *args, **options):
        # Categor√≠as
        categories = [
            (1, 'Espacios b√°sicos', 'üõèÔ∏è'),
            (2, 'Funcionalidad del hogar', 'üè°'),
            (3, 'Trabajo & Creatividad', 'üéØ'),
            (4, 'Bienestar & Salud', 'üß†'),
            (5, 'Naturaleza & Sustentabilidad', 'üåø'),
            (6, 'Entretenimiento & Social', 'üé¨'),
        ]
        for cid, name, emoji in categories:
            Category.objects.update_or_create(id=cid, defaults={"name": name, "emoji": emoji})

        # Configuraci√≥n general
        configs = [
            ("metro_cuadrado_suma", "2"),
            ("metro_cuadrado_precio", "1"),
            ("metro_cuadrado_area_min", "80"),
            ("metro_cuadrado_area_max", "1000"),
            ("porcentaje_muros", "25"),
            ("porcentaje_cocina", "12"),
            ("porcentaje_sala", "13"),
            ("porcentaje_ajuste", "-50"),
        ]
        for key, value in configs:
            GeneralConfig.objects.update_or_create(key=key, defaults={"value": value})

        # Servicios / Espacios
        services = [
            # (category_id, name_en, name_es, price_min_usd, area_max_m2, max_units)
            # üõèÔ∏è Espacios b√°sicos
            (1, 'Large room', 'Habitaci√≥n grande', 70, 18, 5),
            (1, 'Medium room', 'Habitaci√≥n mediana', 60, 14, None),
            (1, 'Small room', 'Habitaci√≥n peque√±a', 50, 10, None),
            (1, 'Large full bathroom', 'Ba√±o completo grande', 20, 16, 5),
            (1, 'Medium full bathroom', 'Ba√±o completo mediano', 15, 14, None),
            (1, 'Small full bathroom', 'Ba√±o completo peque√±o', 10, 6, None),
            (1, 'Large social bathroom (half bath)', 'Ba√±o social (medio ba√±o) grande', 10, 6, 3),
            (1, 'Small social bathroom (half bath)', 'Ba√±o social (medio ba√±o) peque√±o', 5, 2, None),
            (1, 'Floor', 'Pisos', 300, None, 2),
            (1, 'Attic', 'Atico', 200, None, None),
            (1, 'Basement', 'Sotano', 200, None, None),
            (1, 'Parking', 'Parqueadero', 40, 14, 5),
            (1, 'Laundry and storage room', 'Cuarto de lavado y almacenamiento', 40, 8, 2),
            # üè° Funcionalidad del hogar
            (2, 'Multifunctional garage', 'Garage multifuncional', 70, 40, None),
            (2, 'Walking closet / vestidor inteligente', 'Walking closet / vestidor inteligente', 30, 10, None),
            (2, 'Accessible room for the elderly', 'Cuarto accesible adulto mayor', 70, 14, None),
            (2, 'Space for pets', 'Espacio para mascotas', 30, 6, None),
            # üéØ Trabajo & Creatividad
            (3, 'Personal office or hybrid coworking', 'Oficina personal o coworking h√≠brido', 150, 16, None),
            (3, 'Executive or board room', 'Sala ejecutiva o de juntas', 150, 20, None),
            (3, 'Recording studio / podcast', 'Estudio de grabaci√≥n / podcast', 100, 16, None),
            (3, 'Creative craft workshop', 'Taller creativo artesanal', 90, 18, None),
            (3, 'Mini warehouse / e-commerce logistics', 'Mini bodega / log√≠stica e-commerce', 40, 10, None),
            (3, 'Convertible flexible space', 'Espacio flexible convertible', 70, 12, None),
            # üß† Bienestar & Salud
            (4, 'Home gym', 'Gimnasio en casa', 200, 20, None),
            (4, 'Sauna or steam bath', 'Sauna o ba√±o de vapor', 60, 6, None),
            (4, 'Meditation / yoga / mindfulness', 'Meditaci√≥n / yoga / mindfulness', 60, 10, None),
            (4, 'Library or reading room', 'Biblioteca o sala de lectura', 40, 14, None),
            (4, 'Sensory / therapeutic room', 'Cuarto sensorial / terap√©utico', 60, 14, None),
            # üåø Naturaleza & Sustentabilidad
            (5, 'Indoor garden / green wall', 'Jard√≠n interior / muro verde', 60, None, None),
            (5, 'Green roof or living terrace', 'Azotea verde o terraza viva', 100, None, None),
            (5, 'Urban vegetable garden (outdoor/indoor)', 'Huerta urbana (exterior/interior)', 90, None, None),
            (5, 'Rainwater harvesting system', 'Sistema de recolecci√≥n de agua lluvia', 100, None, None),
            (5, 'Outdoor multifunctional space (gardening)', 'Espacio multifuncional exterior (jardineria)', None, None, None),
            (5, 'Composting', 'Compostaje', 80, 12, None),
            (5, 'Drying', 'Secado', 80, 12, None),
            (5, 'Greenhouse', 'Invernadero', 100, 12, None),
            (5, 'Solar panels + backup', 'Paneles solares + backup', 200, None, None),
            # üé¨ Entretenimiento & Social
            (6, 'Game room / indoor cinema', 'Sala de juegos / cine interior', 150, 20, None),
            (6, 'Integrated bar or cellar', 'Bar o cava integrada', 90, 8, None),
            (6, 'BBQ + outdoor kitchen + covered dining room', 'BBQ + cocina exterior + comedor techado', 200, 26, None),
            (6, 'Firepit + chill zone', 'Firepit + zona chill', 80, 12, None),
            (6, 'Social rooftop with veranda', 'Rooftop social con mirador', 110, None, None),
            (6, 'Projector or outdoor cinema', 'Proyector o cine al aire libre', 40, 18, None),
            (6, 'Outdoor playground', 'Zona de juegos infantiles exterior', 50, 20, None),
            (6, 'Swimming pool', 'Piscina', 250, 18, None),
        ]
        for cat_id, name_en, name_es, price, area_max, max_units in services:
            Service.objects.update_or_create(
                category_id=cat_id,
                name_en=name_en,
                defaults={
                    "name_es": name_es,
                    "price_min_usd": price,
                    "area_max_m2": area_max,
                    "max_units": max_units,
                }
            )
        self.stdout.write(self.style.SUCCESS('Datos iniciales cargados correctamente.')) 