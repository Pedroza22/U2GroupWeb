import axios from 'axios';

const API_URL = process.env.NEXT_PUBLIC_API_URL || "https://u2-group-backend.onrender.com/api";

// Interfaces para tipado
export interface ApiResponse<T> {
  success: boolean;
  data: T;
  error?: string;
}

export interface DesignService {
  id: number;
  name_en: string;
  name_es: string;
  price_min_usd?: number;
  area_max_m2?: number;
  max_units?: number;
  notes?: string;
  category_id: number;
  category_name?: string;
}

export interface DesignCategory {
  id: number;
  name: string;
  emoji: string;
  services: DesignService[];
}

export interface DesignEntry {
  id: number;
  title: string;
  description: string;
  image: string;
  created_at: string;
}

// Headers de autenticaci√≥n para admin
const getAuthHeaders = () => {
  const adminToken = localStorage.getItem('u2-admin-token');
  return {
    'Authorization': `Bearer ${adminToken}`,
    'Content-Type': 'application/json',
  };
};

// Obtener todos los servicios de dise√±o
export async function getDesignServices(): Promise<ApiResponse<DesignCategory[]>> {
  try {
    console.log('üîß Cargando servicios de dise√±o...');
    
    const response = await axios.get<ApiResponse<DesignCategory[]>>(`${API_URL}/admin/design/services/`, {
      headers: getAuthHeaders()
    });
    
    console.log('‚úÖ Servicios cargados:', response.data);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Error cargando servicios de dise√±o:', error);
    throw error;
  }
}

// Obtener categor√≠as
export async function getDesignCategories() {
  try {
    console.log('üîß Cargando categor√≠as de dise√±o...');
    
    const response = await axios.get(`${API_URL}/admin/design/categories/`, {
      headers: getAuthHeaders()
    });
    
    console.log('‚úÖ Categor√≠as cargadas:', response.data);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Error cargando categor√≠as:', error);
    throw error;
  }
}

// Crear nueva categor√≠a
export async function createDesignCategory(categoryData: {
  name: string;
  emoji: string;
}) {
  try {
    console.log('üîß Creando categor√≠a de dise√±o:', categoryData);
    
    const response = await axios.post(`${API_URL}/admin/design/categories/create/`, categoryData, {
      headers: getAuthHeaders()
    });
    
    console.log('‚úÖ Categor√≠a creada:', response.data);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Error creando categor√≠a:', error);
    throw error;
  }
}

// Actualizar categor√≠a
export async function updateDesignCategory(categoryId: number, categoryData: {
  name: string;
  emoji: string;
}) {
  try {
    console.log('üîß Actualizando categor√≠a:', categoryId, categoryData);
    
    const response = await axios.put(`${API_URL}/admin/design/categories/${categoryId}/`, categoryData, {
      headers: getAuthHeaders()
    });
    
    console.log('‚úÖ Categor√≠a actualizada:', response.data);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Error actualizando categor√≠a:', error);
    throw error;
  }
}

// Eliminar categor√≠a
export async function deleteDesignCategory(categoryId: number) {
  try {
    console.log('üîß Eliminando categor√≠a:', categoryId);
    
    const response = await axios.delete(`${API_URL}/admin/design/categories/${categoryId}/`, {
      headers: getAuthHeaders()
    });
    
    console.log('‚úÖ Categor√≠a eliminada:', response.data);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Error eliminando categor√≠a:', error);
    throw error;
  }
}

// Crear nuevo servicio
export async function createDesignService(serviceData: {
  name_en: string;
  name_es: string;
  price_min_usd?: number;
  area_max_m2?: number;
  max_units?: number;
  notes?: string;
  category_id: number;
}) {
  try {
    console.log('üîß Creando servicio de dise√±o:', serviceData);
    
    const response = await axios.post(`${API_URL}/admin/design/services/create/`, serviceData, {
      headers: getAuthHeaders()
    });
    
    console.log('‚úÖ Servicio creado:', response.data);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Error creando servicio:', error);
    throw error;
  }
}

// Actualizar servicio
export async function updateDesignService(serviceId: number, serviceData: {
  name_en: string;
  name_es: string;
  price_min_usd?: number;
  area_max_m2?: number;
  max_units?: number;
  notes?: string;
  category_id: number;
}) {
  try {
    console.log('üîß Actualizando servicio:', serviceId, serviceData);
    
    const response = await axios.put(`${API_URL}/admin/design/services/${serviceId}/`, serviceData, {
      headers: getAuthHeaders()
    });
    
    console.log('‚úÖ Servicio actualizado:', response.data);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Error actualizando servicio:', error);
    throw error;
  }
}

// Eliminar servicio
export async function deleteDesignService(serviceId: number) {
  try {
    console.log('üîß Eliminando servicio:', serviceId);
    
    const response = await axios.delete(`${API_URL}/admin/design/services/${serviceId}/`, {
      headers: getAuthHeaders()
    });
    
    console.log('‚úÖ Servicio eliminado:', response.data);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Error eliminando servicio:', error);
    throw error;
  }
}

// Obtener entradas de dise√±o
export async function getDesignEntries() {
  try {
    console.log('üîß Cargando entradas de dise√±o...');
    
    const response = await axios.get(`${API_URL}/admin/design/entries/`, {
      headers: getAuthHeaders()
    });
    
    console.log('‚úÖ Entradas cargadas:', response.data);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Error cargando entradas:', error);
    throw error;
  }
}

// Obtener configuraci√≥n de dise√±o
export async function getDesignConfig() {
  try {
    console.log('üîß Cargando configuraci√≥n de dise√±o...');
    
    const response = await axios.get(`${API_URL}/admin/design/config/`, {
      headers: getAuthHeaders()
    });
    
    console.log('‚úÖ Configuraci√≥n cargada:', response.data);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Error cargando configuraci√≥n:', error);
    throw error;
  }
}

// Actualizar configuraci√≥n de dise√±o
export async function updateDesignConfig(configData: Record<string, string>) {
  try {
    console.log('üîß Actualizando configuraci√≥n de dise√±o:', configData);
    
    const response = await axios.put(`${API_URL}/admin/design/config/`, configData, {
      headers: getAuthHeaders()
    });
    
    console.log('‚úÖ Configuraci√≥n actualizada:', response.data);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Error actualizando configuraci√≥n:', error);
    throw error;
  }
}
